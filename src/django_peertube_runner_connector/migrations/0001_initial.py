# Generated by Django 4.2 on 2023-09-13 10:09

import uuid

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Runner",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        help_text="primary key for the record as UUID",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "runnerToken",
                    models.CharField(help_text="Runner token", max_length=255),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Runner name", max_length=255, unique=True
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="Runner description", max_length=255, null=True
                    ),
                ),
                (
                    "lastContact",
                    models.DateTimeField(help_text="Last time a runner contacted us"),
                ),
                (
                    "ip",
                    models.CharField(
                        help_text="IP address of the runner", max_length=255
                    ),
                ),
                (
                    "createdAt",
                    models.DateTimeField(auto_now_add=True, help_text="Created at"),
                ),
                (
                    "updatedAt",
                    models.DateTimeField(auto_now=True, help_text="Updated at"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RunnerRegistrationToken",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="primary key for the record as UUID",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "registrationToken",
                    models.CharField(
                        help_text="A unique token to be used by runners",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "createdAt",
                    models.DateTimeField(auto_now_add=True, help_text="Created at"),
                ),
                (
                    "updatedAt",
                    models.DateTimeField(auto_now=True, help_text="Updated at"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Video",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        help_text="primary key for the record as UUID",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, help_text="UUID of the video", unique=True
                    ),
                ),
                (
                    "state",
                    models.IntegerField(
                        choices=[
                            (1, "Published"),
                            (2, "To transcode"),
                            (3, "To import"),
                            (4, "Waiting for live"),
                            (5, "Live ended"),
                            (6, "To move to external storage"),
                            (7, "Transcoding failed"),
                            (8, "To move to external storage failed"),
                            (9, "To edit"),
                        ],
                        help_text="State of the video",
                    ),
                ),
                (
                    "duration",
                    models.IntegerField(
                        blank=True, help_text="Duration of the video", null=True
                    ),
                ),
                (
                    "directory",
                    models.CharField(
                        help_text="Directory of the video on the storage",
                        max_length=255,
                    ),
                ),
                (
                    "thumbnailFilename",
                    models.CharField(
                        blank=True,
                        help_text="Thumbnail filename on the storage",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "createdAt",
                    models.DateTimeField(auto_now_add=True, help_text="Creation At"),
                ),
                (
                    "updatedAt",
                    models.DateTimeField(auto_now=True, help_text="Update At"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="VideoStreamingPlaylist",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        help_text="primary key for the record as UUID",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "playlistFilename",
                    models.CharField(
                        blank=True,
                        help_text="Filename of the playlist in the storage",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "createdAt",
                    models.DateTimeField(auto_now_add=True, help_text="Creation At"),
                ),
                (
                    "updatedAt",
                    models.DateTimeField(auto_now=True, help_text="Update At"),
                ),
                (
                    "video",
                    models.OneToOneField(
                        help_text="Video related to the streaming playlist",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="streamingPlaylist",
                        to="django_peertube_runner_connector.video",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="VideoJobInfo",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        help_text="primary key for the record as UUID",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "pendingMove",
                    models.IntegerField(
                        default=0,
                        help_text="Counter of pending move to an external storage operations",
                    ),
                ),
                (
                    "pendingTranscode",
                    models.IntegerField(
                        default=0, help_text="Counter of pending transcoding operations"
                    ),
                ),
                (
                    "createdAt",
                    models.DateTimeField(auto_now_add=True, help_text="Creation At"),
                ),
                (
                    "updatedAt",
                    models.DateTimeField(auto_now=True, help_text="Update At"),
                ),
                (
                    "video",
                    models.OneToOneField(
                        help_text="Video related to the job info",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="jobInfo",
                        to="django_peertube_runner_connector.video",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="VideoFile",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        help_text="primary key for the record as UUID",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "resolution",
                    models.IntegerField(
                        choices=[
                            (0, "H Novideo"),
                            (144, "H 144P"),
                            (240, "H 240P"),
                            (360, "H 360P"),
                            (480, "H 480P"),
                            (720, "H 720P"),
                            (1080, "H 1080P"),
                            (1440, "H 1440P"),
                            (2160, "H 4K"),
                        ],
                        help_text="Resolution of the video",
                    ),
                ),
                ("size", models.BigIntegerField(help_text="Size of the video file")),
                (
                    "extname",
                    models.CharField(
                        help_text="Extension of the video file", max_length=255
                    ),
                ),
                (
                    "fps",
                    models.IntegerField(
                        default=-1, help_text="Frame rate of the video"
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True, help_text="Metadata of the video", null=True
                    ),
                ),
                (
                    "filename",
                    models.CharField(
                        blank=True,
                        help_text="Filename of the video on the storage",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "createdAt",
                    models.DateTimeField(auto_now_add=True, help_text="Creation At"),
                ),
                (
                    "updatedAt",
                    models.DateTimeField(auto_now=True, help_text="Update At"),
                ),
                (
                    "streamingPlaylist",
                    models.ForeignKey(
                        blank=True,
                        help_text="Streaming playlist (.m3u8) related to the video file",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="videoFiles",
                        to="django_peertube_runner_connector.videostreamingplaylist",
                    ),
                ),
                (
                    "video",
                    models.ForeignKey(
                        help_text="Video related to the video file",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="files",
                        to="django_peertube_runner_connector.video",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RunnerJob",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        help_text="primary key for the record as UUID",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, help_text="Job UUID", unique=True
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("vod-web-video-transcoding", "Vod Web Video Transcoding"),
                            ("vod-hls-transcoding", "Vod Hls Transcoding"),
                            (
                                "vod-audio-merge-transcoding",
                                "Vod Audio Merge Transcoding",
                            ),
                            ("live-rtmp-hls-transcoding", "Live Rtmp Hls Transcoding"),
                            ("video-studio-transcoding", "Video Studio Transcoding"),
                        ],
                        help_text="Job type",
                        max_length=255,
                    ),
                ),
                (
                    "payload",
                    models.JSONField(
                        help_text="Job payload (metadata given to the runner)"
                    ),
                ),
                (
                    "privatePayload",
                    models.JSONField(
                        help_text="Job private payload (metadata given to the runner)"
                    ),
                ),
                (
                    "state",
                    models.IntegerField(
                        choices=[
                            (1, "Pending"),
                            (2, "Processing"),
                            (3, "Completed"),
                            (4, "Errored"),
                            (5, "Waiting for parent job"),
                            (6, "Cancelled"),
                            (7, "Parent errored"),
                            (8, "Parent cancelled"),
                            (9, "Completing"),
                        ],
                        help_text="Job state",
                    ),
                ),
                (
                    "failures",
                    models.IntegerField(default=0, help_text="Number of failures"),
                ),
                (
                    "error",
                    models.CharField(
                        blank=True, help_text="Error message", max_length=255, null=True
                    ),
                ),
                ("priority", models.IntegerField(help_text="Job priority")),
                (
                    "processingJobToken",
                    models.CharField(
                        blank=True,
                        help_text="Processing job token",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "progress",
                    models.FloatField(blank=True, help_text="Job progress", null=True),
                ),
                (
                    "startedAt",
                    models.DateTimeField(
                        blank=True, help_text="Job started at", null=True
                    ),
                ),
                (
                    "finishedAt",
                    models.DateTimeField(
                        blank=True, help_text="Job finished at", null=True
                    ),
                ),
                ("createdAt", models.DateTimeField(auto_now_add=True)),
                ("updatedAt", models.DateTimeField(auto_now=True)),
                (
                    "dependsOnRunnerJob",
                    models.ForeignKey(
                        blank=True,
                        help_text="job that depends on this one",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="django_peertube_runner_connector.runnerjob",
                    ),
                ),
                (
                    "runner",
                    models.ForeignKey(
                        blank=True,
                        help_text="Runner processing the job",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="django_peertube_runner_connector.runner",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="runner",
            name="runnerRegistrationToken",
            field=models.ForeignKey(
                help_text="Runner registration token",
                on_delete=django.db.models.deletion.CASCADE,
                to="django_peertube_runner_connector.runnerregistrationtoken",
            ),
        ),
    ]
